name: Build & Test

on: 
 push:
 pull_request:


jobs:

  build:
    runs-on: ubuntu-latest
  
    defaults:
      run:
        working-directory: .
    outputs:
      semver: ${{ steps.gitversion.outputs.semver }}
      LicenseClearingTool: ${{ steps.packageBuildResults.outputs.LicenseClearingTool }}  
      nupkg-LicenseClearingTool: ${{ steps.createNupkg.outputs.nupkg-LicenseClearingTool }}
      docker-LicenseClearingTool: ${{ steps.builddocker.outputs.docker-LicenseClearingTool }}
      
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0   
        
    - name: Setup Version     
      if: ${{ false }}  # disable for now
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        versionSpec: '5.12.0'
      env: 
        ACTIONS_ALLOW_UNSECURE_COMMANDS: TRUE
    
    - name: Determine Version   
      if: ${{ false }}  # disable for now
      uses: gittools/actions/gitversion/execute@v0.10.2
      with:
        useConfigFile: true        
      env: 
        ACTIONS_ALLOW_UNSECURE_COMMANDS: TRUE

    - uses: actions/checkout@v3
    - name: Install from PSGallery
      shell: pwsh
      run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module SqlServer, PSScriptAnalyzer
        
    - name: get SemVer   
      if: ${{ false }}  # disable for now
      id: gitversion
      run: |
        echo "SemVer: v$($env:GitVersion_SemVer)" 
        Write-Host "::set-output name=semver::$($env:GitVersion_MajorMinorPatch)"  
        $fileName = "dummy-v$($env:GitVersion_SemVer)"
        echo "SemVerMMP: v$($env:GitVersion_MajorMinorPatch)"
        Write-Host "Filename: '$fileName'" 

    - name: Restore Packages
      #if: ${{ false }}  # disable for now
      run: dotnet restore src/LicenseClearingTool.sln 
    
    - name: Build
      #if: ${{ false }}  # disable for now
      run: dotnet build -c Release -p:Configuration=Release -bl:continous-clearing.binlog -noconlog src/LicenseClearingTool.sln

    - name: Build the Docker image
      id: builddocker
      #if: ${{ false }}  # disable for now
      run: |
        docker build . --file Dockerfile --tag ${{ github.repository }}:continuous-clearing-v6.2.0
        docker save ${{ github.repository }}:continuous-clearing-v6.2.0 -o continuous-clearing-v6.2.0.tar
        echo "::set-output name=docker-LicenseClearingTool::continuous-clearing-v6.2.0.tar"
        
    - name: Archive docker image      
      #if: ${{ false }}  # disable for now
      uses: actions/upload-artifact@v2
      with:
        name: docker-continuous-clearing
        path: |
          *.tar
  
      
    - name: update appSettingsSW360IntegrationTest.json
      if: ${{ false }}  # disable for now
      run: |
         chmod +x ./Scripts/json_update.ps1
         ./Scripts/json_update.ps1 -JsonFile 'src\TestUtilities\appSettingsSW360IntegrationTest.json' 
      env:
        SW360HOST: ${{ secrets.SW360HOST }}
        SW360APPPORT: ${{ secrets.SW360APPPORT }}
        FOSSYHOST: ${{ secrets.FOSSYHOST }}
        FOSSYAPPPORT: ${{ secrets.FOSSYAPPPORT }}
        USEREMAIL: ${{ secrets.USEREMAIL }}
        ARTIFACTORYAPIKEY: ${{ secrets.ARTIFACTORYAPIKEY }}
        JFROGURL: ${{ secrets.JFROGURL }}
        SW360AUTHKEY: ${{ secrets.SW360AUTHTOKEN }}
      
    - name: update appsettingsUnitTest.json
      if: ${{ false }}  # disable for now
      run: ./Scripts/json_update_ut.ps1 -JsonFile 'src\UnitTestUtilities\appsettingsUnitTest.json' 
      env:
        SW360HOST: ${{ secrets.SW360HOST }}
        SW360APPPORT: ${{ secrets.SW360APPPORT }}
        FOSSYHOST: ${{ secrets.FOSSYHOST }}
        FOSSYAPPPORT: ${{ secrets.FOSSYAPPPORT }}
        JFROGURL: ${{ secrets.JFROGURL }}
        
   
    
    - name: Archive Build Log
      uses: actions/upload-artifact@v2
      if: ${{ success() || failure() }}
      with:
        name: Compile_Solution_log
        path: |
          src/*.binlog
          *.binlog    

    - name: zip
      run: |
         sourceFolder=$(realpath "$GITHUB_WORKSPACE/out" | sed 's/\/*$//')
         outFolder="$GITHUB_WORKSPACE/out/continuous-clearing"
         mkdir -p "$outFolder"
         fileName="continuous-clearing-v6.2.0.zip"
         echo "Filename: $fileName"
         echo "sourceFolder: $sourceFolder"
         echo "Outfolder: $outFolder"
         echo "Creating zip file..."
         cd "$sourceFolder" || exit 1
         zip -r "$GITHUB_WORKSPACE/out/continuous-clearing-v6.2.0.zip" .
         cd "$(dirname "$GITHUB_WORKSPACE")"
         mv "$GITHUB_WORKSPACE/out/continuous-clearing-v6.2.0.zip" "$outFolder"
         echo "::set-output name=LicenseClearingTool::$fileName"
     

    - name: Archive Build Output
      uses: actions/upload-artifact@v2
      with:
        name: continuous-clearing
        path: |
           out/continuous-clearing
           
    - name: Create Nuget Packages 
      id: createNupkg
      run: |
        nuget pack CA.nuspec -Version 6.2.0
        Write-Host "::set-output name=nupkg-LicenseClearingTool::continuous-clearing.6.2.0.nupkg"
        
    - name: Archive NuGet Packages
      uses: actions/upload-artifact@v2
      with:
        name: nuget-continuous-clearing
        path: |
          *.nupkg
          
    - name: Build the Docker image
     # id: builddocker
      #if: ${{ false }}  # disable for now
      run: |
        docker build . --file Dockerfile --tag ${{ github.repository }}:continuous-clearing-v6.2.0
        docker save ${{ github.repository }}:continuous-clearing-v6.2.0 -o continuous-clearing-v6.2.0.tar
        Write-Host "::set-output name=docker-LicenseClearingTool::continuous-clearing-v6.2.0.tar"
    - name: Archive docker image      
      #if: ${{ false }}  # disable for now
      uses: actions/upload-artifact@v2
      with:
        name: docker-continuous-clearing
        path: |
          *.tar
          
  release:
    if: github.ref == 'refs/heads/main'    
    runs-on: self-hosted
    needs: build
  
    steps:
      - name: Download Build Output
        uses: actions/download-artifact@v2
        with:
          name: continuous-clearing

      - name: Download NuGet Package
        uses: actions/download-artifact@v2
        with:
          name: nuget-continuous-clearing
      
      - name: Download Docker image
        uses: actions/download-artifact@v2
        with:
          name: docker-continuous-clearing
          
      - name: Debug
        run: |
          tree
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          tag_name: v6.2.0
          release_name: Release v6.2.0
          body: |
            ${{ github.event.head_commit.message }}
          draft: true
          prerelease: false   
          
      - name: Upload Zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./${{ needs.build.outputs.LicenseClearingTool }}
          asset_name: ${{ needs.build.outputs.LicenseClearingTool }}
          asset_content_type: application/zip
          
      - name: Upload Nupkg
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./${{ needs.build.outputs.nupkg-LicenseClearingTool }}
          asset_name: ${{ needs.build.outputs.nupkg-LicenseClearingTool }}
          asset_content_type: application/zip
        
      - name: Upload Nupkg
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./${{ needs.build.outputs.docker-LicenseClearingTool }}
          asset_name: ${{ needs.build.outputs.docker-LicenseClearingTool }}
          asset_content_type: application/zip
          
      - name: Upload ReadmeOSS_nupkg file
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./ReadmeOSS_continuous-clearing_nupkg.html
          asset_name: ReadmeOSS_continuous-clearing_nupkg.html
          asset_content_type: text/html
        
      - name: Upload ReadmeOSS_Docker file
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./ReadmeOSS_continuous-clearing_DockerImage.html
          asset_name: ReadmeOSS_continuous-clearing_DockerImage.html
          asset_content_type: text/html
