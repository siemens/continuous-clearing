# --------------------------------------------------------------------------------------------------------------------
# SPDX-FileCopyrightText: 2025 Siemens AG
#
#  SPDX-License-Identifier: MIT
# -------------------------------------------------------------------------------------------------------------------- 

parameters:
  # SW360 and Fossology parameters
  - name: sw360Url
    type: string
    default: ''
  - name: sw360Token
    type: string
    default: ''
  - name: sw360ProjectId
    type: string
    default: ''
  - name: sw360ProjectName
    type: string
    default: ''
  - name: fossologyUrl
    type: string
    default: ''

  # JFrog parameters
  - name: JfrogUrl
    type: string
    default: ''
  - name: JfrogToken
    type: string
    default: ''
  - name: JfrogDryRun
    type: boolean
    default: true

  # CA Tool parameters
  - name: projectDefinitions
    type: object
    default: []
  - name: outputFolder
    type: string
    default: ''

  # Template parameters
  - name: PackageCreatorEnabled
    type: boolean
    default: true
  - name: ArtifactoryUploaderEnabled
    type: boolean
    default: true
  - name: appSettingsPath
    type: string
    default: ''

steps:
  - task: CmdLine@2
    displayName: 'Build CA Tool'
    inputs:
      script: |
        dotnet build $(Build.SourcesDirectory)/continuous-clearing/src/LicenseClearingTool.sln --configuration Release

  - task: PowerShell@2
    displayName: 'Build CA Tool Image'
    inputs:
      targetType: 'inline'
      script: |
        docker build -t ca-tool $(Build.SourcesDirectory)/continuous-clearing

  - task: PowerShell@2
    displayName: 'Tool pre-requisite'
    inputs:
      targetType: 'inline'
      script: |
        $baseOutputPath = "${{ parameters.outputFolder }}"
        $sbomPath = Join-Path $baseOutputPath "sbom"
        $logsPath = Join-Path $baseOutputPath "logs"

        foreach ($path in @($baseOutputPath, $sbomPath, $logsPath)) {
          if (-not (Test-Path -Path $path)) {
            New-Item -ItemType Directory -Path $path | Out-Null
            Write-Host "Created directory: $path"
          } else {
            Write-Host "Directory already exists: $path"
          }
        }


  - ${{ each project in parameters.projectDefinitions }}:
    - template: ../azure-pipelines-syft-generate-sbom-template.yml
      parameters:
          projectType: ${{ project.projectType }}
          inputFolder: ${{ project.inputFolder }}

    - task: PowerShell@2
      displayName: 'Run PackageIdentifier for ${{ project.projectType }}'
      inputs:
        targetType: 'inline'
        script: |
          # Extract appsettings filename and directory
          $settingsFileHostPath = "${{ parameters.appSettingsPath }}"
          $settingsFileName = [System.IO.Path]::GetFileName($settingsFileHostPath)
          $settingsDir = [System.IO.Path]::GetDirectoryName($settingsFileHostPath)


          $args = @(
            "--Directory:InputFolder", "/mnt/Input",
            "--Directory:OutputFolder", "/mnt/Output",
            "--ProjectType", "${{ project.projectType }}",
            "--SW360:ProjectName", "${{ parameters.sw360ProjectName }}",
            "--SW360:ProjectId", "${{ parameters.sw360ProjectId }}",
            "--SW360:AuthTokenType", "Token",
            "--SW360:URL", "${{ parameters.sw360Url }}",
            "--SW360:Token", "${{ parameters.sw360Token }}",
            "--SW360:Fossology:URL", "${{ parameters.fossologyUrl }}",
            "--JFrog:URL", "${{ parameters.JfrogUrl }}",
            "--Jfrog:Token", "${{ parameters.JfrogToken }}",
            "--settingsfilepath", "/etc/CATool/$settingsFileName"
          )

          $projectTypes = @()
          $parameters.projectDefinitions | ForEach-Object { $projectTypes += $_.projectType }
          $index = [array]::IndexOf($projectTypes, "${{ project.projectType }}")
          if ($index -ne 0) {
            $args += "--MultipleProjectType"
            $args += "true"
          }

          docker run --rm --network="host" `
            -v "${{ project.inputFolder }}:/mnt/Input" `
            -v "${{ parameters.outputFolder }}/sbom:/mnt/Output" `
            -v "${{ parameters.outputFolder }}/logs:var/log" `
            -v "${settingsDir}:/etc/CATool" `
            ca-tool dotnet PackageIdentifier.dll @args

  - task: PowerShell@2
    condition: eq('${{ parameters.PackageCreatorEnabled }}', true)
    displayName: 'Run SW360PackageCreator'
    inputs:
      targetType: 'inline'
      script: |
        # Extract appsettings filename and directory
        $settingsFileHostPath = "${{ parameters.appSettingsPath }}"
        $settingsFileName = [System.IO.Path]::GetFileName($settingsFileHostPath)
        $settingsDir = [System.IO.Path]::GetDirectoryName($settingsFileHostPath)

        docker run --rm --network="host" `
          -v "${{ parameters.outputFolder }}/sbom:/mnt/Output" `
          -v "${{ parameters.outputFolder }}/logs:var/log" `
          -v "${settingsDir}:/etc/CATool" `
          ca-tool dotnet SW360PackageCreator.dll `
          --Directory:OutputFolder "/mnt/Output" `
          --SW360:ProjectName "${{ parameters.sw360ProjectName }}" `
          --SW360:ProjectID "${{ parameters.sw360ProjectId }}" `
          --SW360:AuthTokenType "Token" `
          --SW360:URL "${{ parameters.sw360Url }}" `
          --SW360:Token "${{ parameters.sw360Token }}" `
          --SW360:Fossology:URL "${{ parameters.fossologyUrl }}" `
          --settingsfilepath /etc/CATool/$settingsFileName

  - task: PowerShell@2
    condition: eq('${{ parameters.ArtifactoryUploaderEnabled }}', true)
    displayName: 'Run ArtifactoryUploader'
    inputs:
      targetType: 'inline'
      script: |
        # Extract appsettings filename and directory
        $settingsFileHostPath = "${{ parameters.appSettingsPath }}"
        $settingsFileName = [System.IO.Path]::GetFileName($settingsFileHostPath)
        $settingsDir = [System.IO.Path]::GetDirectoryName($settingsFileHostPath)        

        docker run --rm --network="host" `
          -v "${{ parameters.outputFolder }}/sbom:/mnt/Output" `
          -v "${{ parameters.outputFolder }}/logs:var/log" `
          ca-tool dotnet ArtifactoryUploader.dll `
          --Directory:OutputFolder "/mnt/Output" `
          --SW360:ProjectName "${{ parameters.sw360ProjectName }}" `
          --SW360:ProjectID "${{ parameters.sw360ProjectId }}" `
          --SW360:AuthTokenType "Token" `
          --SW360:URL "${{ parameters.sw360Url }}" `
          --SW360:Token "${{ parameters.sw360Token }}" `
          --JFrog:URL "${{ parameters.JfrogUrl }}" `
          --JFrog:Token "${{ parameters.JfrogToken }}" `
          --JFrog:DryRun "${{ parameters.JfrogDryRun }}" `
          --settingsfilepath /etc/CATool/$settingsFileName

  - task: PublishBuildArtifacts@1
    displayName: 'Publish SBOM Artifacts'
    inputs:
      PathtoPublish: '${{ parameters.outputFolder }}/SBOM'
      ArtifactName: 'ContinuousClearing_Bom_Image'
      publishLocation: 'Container'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Logs Artifacts'
    inputs:
      PathtoPublish: '${{ parameters.outputFolder }}/Logs'
      ArtifactName: 'ContinuousClearing_Log_Image'
      publishLocation: 'Container'
  