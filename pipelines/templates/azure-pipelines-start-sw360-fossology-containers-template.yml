# --------------------------------------------------------------------------------------------------------------------
# SPDX-FileCopyrightText: 2025 Siemens AG
#
#  SPDX-License-Identifier: MIT
# -------------------------------------------------------------------------------------------------------------------- 

parameters:
  - name: dockerRegistry
    type: string

  - name: sw360DockerImage
    type: string

  - name: fossologyDockerImage
    type: string

  - name: sw360Port
    type: string

  - name: fossologyPort
    type: string

  - name: sw360Url
    type: string
    
  - name: sw360Token
    type: string

steps:
  - task: Docker@2
    inputs:
      containerRegistry: ${{ parameters.dockerRegistry }}
      command: 'login'
    displayName: "Docker login to ${{ parameters.dockerRegistry }}"

  # Ensure the cache folder exists
  - script: mkdir -p $(Pipeline.Workspace)/docker
    displayName: 'Ensure docker cache directory exists'

  # --- SW360 CACHE ---
  - task: Cache@2
    displayName: 'Cache SW360 image'
    inputs:
      key: 'docker | "$(Agent.OS)" | sw360'
      path: $(Pipeline.Workspace)/docker
      cacheHitVar: SW360_CACHE_RESTORED

  - script: |
      IMAGE="${{ parameters.sw360DockerImage }}"
      IMAGE_SANITIZED=$(echo "$IMAGE" | sed 's|/|_|g')
      docker load -i "$(Pipeline.Workspace)/docker/${IMAGE_SANITIZED}.tar"
    displayName: 'Restore SW360 Docker image from cache'
    condition: and(not(canceled()), eq(variables.SW360_CACHE_RESTORED, 'true'))

  - script: |
      IMAGE="${{ parameters.sw360DockerImage }}"
      IMAGE_SANITIZED=$(echo "$IMAGE" | sed 's|/|_|g')
      docker pull "$IMAGE"
      docker save -o "$(Pipeline.Workspace)/docker/${IMAGE_SANITIZED}.tar" "$IMAGE"
    displayName: 'Pull and cache SW360 Docker image'
    condition: and(not(canceled()), not(failed()), ne(variables.SW360_CACHE_RESTORED, 'true'))

  # --- FOSSOLOGY CACHE ---
  - task: Cache@2
    displayName: 'Cache FOSSology image'
    inputs:
      key: 'docker | "$(Agent.OS)" | fossology'
      path: $(Pipeline.Workspace)/docker
      cacheHitVar: FOSS_CACHE_RESTORED

  - script: |
      IMAGE="${{ parameters.fossologyDockerImage }}"
      IMAGE_SANITIZED=$(echo "$IMAGE" | sed 's|/|_|g')
      docker load -i "$(Pipeline.Workspace)/docker/${IMAGE_SANITIZED}.tar"
    displayName: 'Restore FOSSology Docker image from cache'
    condition: and(not(canceled()), eq(variables.FOSS_CACHE_RESTORED, 'true'))

  - script: |
      IMAGE="${{ parameters.fossologyDockerImage }}"
      IMAGE_SANITIZED=$(echo "$IMAGE" | sed 's|/|_|g')
      docker pull "$IMAGE"
      docker save -o "$(Pipeline.Workspace)/docker/${IMAGE_SANITIZED}.tar" "$IMAGE"
    displayName: 'Pull and cache FOSSology Docker image'
    condition: and(not(canceled()), not(failed()), ne(variables.FOSS_CACHE_RESTORED, 'true'))


  # --- START CONTAINERS AND HEALTHCHECKS ---
  - script: |
      echo "Starting a new sw360 container..."
      CONTAINER_ID=$(docker run -dit --name sw360 --memory=5g -p ${{ parameters.sw360Port }}:8080 -p 5985:5984 -p 5435:5432 --add-host=host.docker.internal:host-gateway ${{ parameters.sw360DockerImage }})

      if [ -z "$CONTAINER_ID" ]; then
          echo "Failed to start sw360 container!"
          exit 1
      fi

      echo "sw360 Container ID: $CONTAINER_ID"
      echo "Container started successfully."
    displayName: "Start sw360 Container"

  - script: |
      echo "Starting a new fossology container..."
      CONTAINER_ID=$(docker run -dit --name fossology -p ${{ parameters.fossologyPort }}:80 ${{ parameters.fossologyDockerImage }})

      if [ -z "$CONTAINER_ID" ]; then
          echo "Failed to start fossology container!"
          exit 1
      fi

      echo "fossology Container ID: $CONTAINER_ID"
      echo "Container started successfully."
    displayName: "Start fossology Container"

  - script: |
      echo "Waiting for 5 minutes to allow sw360 to start..."
      sleep 300
    displayName: "Initial Wait (5 minutes)"
    enabled: true

  - script: |
      echo "Waiting for sw360 API to be available..."

      URL="${{ parameters.sw360Url }}/resource/api/projects"
      AUTH_TOKEN="${{ parameters.sw360Token }}"
      MAX_RETRIES=60
      RETRY_INTERVAL=10

      for i in $(seq 1 $MAX_RETRIES); do
          echo "Attempt $i: Checking sw360 API..."

          RESPONSE=$(curl --silent --show-error --fail --location --write-out "\nHTTP_STATUS:%{http_code}" \
            --header "Authorization: Token $AUTH_TOKEN" \
            --header "Accept: application/hal+json" \
            "$URL" || echo "HTTP_STATUS:000")

          BODY=$(echo "$RESPONSE" | awk '!/HTTP_STATUS/ {print}')
          HTTP_STATUS=$(echo "$RESPONSE" | awk -F'HTTP_STATUS:' '{print $2}' | tr -d '[:space:]')

          echo "Response Status: $HTTP_STATUS"
          echo "Response Body:"
          echo "$BODY"

          if [ "$HTTP_STATUS" == "200" ]; then
              echo "sw360 API is up and running!"
              exit 0
          fi

          echo "sw360 API not ready yet (Status: $HTTP_STATUS). Retrying in $RETRY_INTERVAL seconds..."
          sleep $RETRY_INTERVAL
      done

      echo "ERROR: sw360 API did not become ready in time."
      exit 1
    displayName: "Wait for sw360 API to be ready"
